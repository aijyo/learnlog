bool ScreenCapturerMagnifier::CaptureByDx9()
{
	char* lpMem = (char*)GetWindowLongW(m_hWndMag, 0);
	int pThis = *((DWORD*)lpMem + 46);
	//DWORD dwContinue = 1;
	do
	{
		if (!pThis) break;
		int nCount = *(DWORD*)(pThis + 7152);

		if (nCount < 1) return false;

		for (int index = 0; index < nCount; index++)
		{
			//xFilterTextureD3D9(pThis, index, dwContinue);

			IDirect3DDevice9* d3d_device_ = nullptr;
			IDirect3DTexture9* texture_ = nullptr;
			//IDirect3DVertexBuffer9* vertex_buffer_ = nullptr;
			IDirect3DSurface9* pSurface = nullptr;
			IDirect3DSurface9* pPlainSurface = nullptr;
			D3DSURFACE_DESC pDesc;
			int pThis_7128; // ecx
			int pThis_7604; // edi
			int pThis_7128_2; // [esp+98h] [ebp-60h]


			D3DLOCKED_RECT rcLock = { 0 };

			RECT rcCapture = GetScreenRect();
			RECT rcClipped = { 0 };
			int nWidth = 0;
			int nHeight = 0;

			pThis_7128 = *(DWORD*)(pThis + 4 * index + 7128);
			pThis_7604 = *(DWORD*)(pThis + 4 * index + 7604);
			pThis_7128_2 = pThis_7128;

			d3d_device_ = (IDirect3DDevice9*)(*(DWORD*)(*(DWORD*)pThis_7128_2));
			texture_ = (IDirect3DTexture9*)(*(DWORD*)(*(DWORD*)pThis_7604));


			int v7 = 52 * *(DWORD*)(pThis + 4 * index + 7576);;
			RECT rcScreen = *(const RECT*)(pThis + v7 + 7268);
			BOOL bSuc = IntersectRect(&rcClipped, &rcScreen, &rcCapture);
			do
			{
				if (!bSuc) break;

				OffsetRect(&rcClipped, -rcCapture.left, -rcCapture.top);

				nWidth = rcClipped.right - rcClipped.left;
				nHeight = rcClipped.bottom - rcClipped.top;

				HRESULT result = (*(int(__thiscall**)(DWORD, int, DWORD, int*))(*(DWORD*)pThis_7604 + 68))(
					*(DWORD*)(*(DWORD*)pThis_7604 + 68),
					pThis_7604,
					0,
					(int*)&pDesc);
				//result = texture_->GetLevelDesc(0, &pDesc);

				//assert(pDesc.Format == D3DFMT_A8R8G8B8);

				pSurface = nullptr;
				result = (*(int(__thiscall**)(DWORD, int, DWORD, int*))(*(DWORD*)pThis_7604 + 72))(
					*(DWORD*)(*(DWORD*)pThis_7604 + 72),
					pThis_7604,
					0,
					(int*)&pSurface);
				//result = texture_->GetSurfaceLevel(0, &pSurface);
				int flag = 0;
				if (result < 0) break;

				pPlainSurface = nullptr;
				result = (*(int(__thiscall**)(DWORD, int, int, int, int, int, int*, DWORD))(*(DWORD*)pThis_7128_2 + 144))(// STDMETHOD(CreateOffscreenPlainSurface)(THIS_ UINT Width,UINT Height,D3DFORMAT Format,D3DPOOL Pool,IDirect3DSurface9** ppSurface,HANDLE* pSharedHandle) PURE;
					*(DWORD*)(*(DWORD*)pThis_7128_2 + 144),
					pThis_7128_2,
					nWidth,
					nHeight,
					pDesc.Format,
					D3DPOOL_SYSTEMMEM,
					(int*)&pPlainSurface,
					0);
				//result = d3d_device_->CreateOffscreenPlainSurface(nWidth, nHeight, pDesc.Format, D3DPOOL_SYSTEMMEM, &pPlainSurface, 0);

				if (result < 0)
				{
					flag = 19;
					break;
				}

				RECT rcSource = { 0, 0, nWidth, nHeight };
				bSuc = IntersectRect(&rcClipped, &rcSource, &rcClipped);
				if (!bSuc)
				{
					break;
				}
				result = (*(int(__thiscall**)(DWORD, int, int, int))(*(DWORD*)pThis_7128_2 + 128))(// STDMETHOD(GetRenderTargetData)(THIS_ IDirect3DSurface9* pRenderTarget,IDirect3DSurface9* pDestSurface) PURE;
					*(DWORD*)(*(DWORD*)pThis_7128_2 + 128),
					pThis_7128_2,
					(int)pSurface,
					(int)pPlainSurface);
				//result = d3d_device_->GetRenderTargetData(pSurface, pPlainSurface);
				if (result == D3DERR_DRIVERINTERNALERROR )
				{
					int n = 0;
					n = 9;
				}
				if (result == D3DERR_DEVICELOST)
				{
					int n = 0;
					n = 9;
				}
				if (result == D3DERR_INVALIDCALL)
				{
					int n = 0;
					n = 9;
				}
				if (result < 0)
				{
					break;
				}

				result = pPlainSurface->LockRect(&rcLock, &rcClipped, D3DLOCK_NOSYSLOCK);

				if (result < 0)
					break;


				webrtc::DesktopSize deskSize = webrtc::DesktopSize(nWidth, nHeight);
				BasicDesktopFrame *pTemp = new BasicDesktopFrame(deskSize);

				std::unique_ptr<BasicDesktopFrame> frame;
				frame.reset(pTemp);


				frame->CopyPixelsFrom((uint8_t*)rcLock.pBits, rcLock.Pitch, DesktopRect::MakeSize(deskSize));

				pPlainSurface->UnlockRect();//解锁

				if (nullptr != m_callback)
				{
					m_callback->OnCaptureResult(DesktopCapturer::Result::SUCCESS, std::move(frame));
				}		

			} while (false);

			if (pSurface)
			{
				pSurface->Release();
				pSurface = nullptr;
			}

			if (pPlainSurface)
			{
				pPlainSurface->Release();
				pPlainSurface = nullptr;
			}
		}

	} while (false);
	return true;
}
